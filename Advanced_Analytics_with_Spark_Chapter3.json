{"paragraphs":[{"title":"Alternating Least Squares Recommender Algorithm","text":"","user":"anonymous","dateUpdated":"2018-05-16T11:15:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526371116097_-572731138","id":"20180515-075836_648066722","dateCreated":"2018-05-15T07:58:36+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:18068"},{"title":"Preparing the Data","text":"val rawUserArtistData = spark.read.textFile(\"hdfs:///user/ds/user_artist_data.txt\")\nrawUserArtistData.take(5).foreach(println)","user":"anonymous","dateUpdated":"2018-05-16T11:21:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526469358551_1034354791","id":"20180516-111558_1650499609","dateCreated":"2018-05-16T11:15:58+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18069"},{"text":"val userArtistDF = rawUserArtistData.map{ line => \n    val Array(user,artist,_*) = line.split(' ')\n    (user.toInt, artist.toInt)\n}.toDF(\"user\",\"artist\")\n\nuserArtistDF.agg(\n        min(\"user\"), max(\"user\"), min(\"artist\"), max(\"artist\")).show()","user":"anonymous","dateUpdated":"2018-05-16T11:25:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526469754332_-1563301217","id":"20180516-112234_771709929","dateCreated":"2018-05-16T11:22:34+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18070"},{"text":"val rawArtistData = spark.read.textFile(\"hdfs:///user/ds/artist_data.txt\")\n\nval artistByID = rawArtistData.flatMap { line =>\n    val (id, name) = line.span(_ != '\\t')\n    if (name.isEmpty) {\n        None\n    } else {\n        try {\n            Some((id.toInt, name.trim))\n        } catch {\n            case _: NumberFormatException => None\n            }\n    }\n}.toDF(\"id\",\"name\")","user":"anonymous","dateUpdated":"2018-05-16T11:36:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526469937761_-2049751877","id":"20180516-112537_1541273829","dateCreated":"2018-05-16T11:25:37+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18071"},{"text":"val rawArtistAlias = spark.read.textFile(\"hdfs:///user/ds/artist_alias.txt\")\nval artistAlias = rawArtistAlias.flatMap { line =>\n    val Array(artist, alias) = line.split('\\t')\n    if (artistl.isEmpty) {\n        None\n    } else {\n        Some((artist.toInt, alias.toInt))\n    }\n}.collect().toMap\n\nartistAlias.head\n\nartistByID.filter($\"id\" isin (1208690, 1003926)).show()\n    ","user":"anonymous","dateUpdated":"2018-05-16T11:42:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526469937185_-1828136511","id":"20180516-112537_831452690","dateCreated":"2018-05-16T11:25:37+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18072"},{"title":"Building a First Model","text":"import org.apache.spark.sql._\nimport org.apache.spark.broadcast._\n\ndef buildCounts(rawUserArtistData: Dataset[String], bArtistAlias: Broadcast[Map[Int, Int]]):\n    DataFrame = {\n        rawUserArtistData.map {line =>\n            val Array(userID, artistID, count) = line.split(' ').map(_.toInt)\n            val finalArtistID = bArtistAlias.value.getOrElse(artistID, artistID)\n        (userID, finalArtistID, count)\n        }.toDF(\"user\", \"artist\", \"count\")\n    }\n\nval bArtistAlias = spark.sparkContext.broadcast(artistAlias)\n\nval trainData = buildCounts(rawUserArtistData, bArtistAlias)\ntrainData.cache()\n\n//build a model\n\nimport org.apache.spark.ml.recommendation._\nimport scala.util.Random\n\nval model = new ALS().\n    setSeed(Random.nextLong()).\n    setImplicitPrefs(true).\n    setRank(10).\n    setRegParam(0.01).\n    setAlpha(1.0).\n    setMaxIter(5).\n    setUserCol(\"user\").\n    setItemCol(\"artist\").\n    setRatingCol(\"count\").\n    setPredictionCol(\"prediction\").\n    fit(trainData)","user":"anonymous","dateUpdated":"2018-05-16T14:23:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526470932528_-1977237959","id":"20180516-114212_1511951777","dateCreated":"2018-05-16T11:42:12+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18073"},{"title":"Spot Checking Recommendations","text":"val userID = 2093760\n\nval existingArtistIDs = trainData.filter($\"user\" === userID).select(\"artist\").as[Int].collect()\n \nartistByID.filter($\"id\" isin (existingArtistIDs:_*)).show() //find the artist ID and name for userID 2093760, to see this user's taste\n\n// get the recommendation for this user\ndef makeRecommendations(model: ALSModel, userID: Int, howMany: Int):\n    DataFrame = {\n        val toRecommend = model.itemFactors.select($\"id\".as(\"artist\")).withColumn(\"user\", lit(userID)) // select all artist ID with target userID\n        \n        model.transform(toRecommend).select(\"artist\", \"prediction\").orderBy($\"prediction\".desc).limit(howMany) //score all artists, return top by scores. \"prediction\" is \"score\" here\n        }\n\nval topRecommendations = makeRecommendations(model, userID, 5)\ntopRecommendations.show()\n\nval recommendedArtistIDs = topRecommendations.select(\"artist\").as[Int].collect()\nartistByID.filter($\"id\" isin (recommendedArtistIDs:_*)).show()","user":"anonymous","dateUpdated":"2018-05-16T14:34:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526480608481_2110471970","id":"20180516-142328_1531646376","dateCreated":"2018-05-16T14:23:28+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18074"},{"title":"Evaluating recommendation quality","text":"// computeing AUC\ndef areaUnderCurve( positiveData: DataFrame, bAllArtistIDs: Broadcast[Array[Int]], predictionFunction:(DataFrame => DataFrame)):\n    Double = {...}\n    \nval allData = buildCounts(rawUserArtistData, bArtistAlias)\nval Array(trainData, cvData) = allData.randomSplit(Array(0.9,0.1))\ncvData.cache()\n\nval allArtistIDs = allData.select(\"artist\").as[Int].distinct().collect()\nval bAllArtistIDs = spark.sparkContext.broadcast(allArtistIDs)\n\nval model = new ALS().\n    setSeed(Random.nextLong()).\n    setImplicitPrefs(true).\n    setRank(10).setRegParam(0.01).setAlpha(1.0).setMaxIter(5).  // \"rank\" is k \n    setUserCol(\"user\").setItemCol(\"artist\").\n    setRatingCol(\"count\").setPredictionCol(\"prediction\").\n    fit(trainData)\n    \nareaUnderCurve(cvData, bAllArtistIDs, model.transform)","user":"anonymous","dateUpdated":"2018-05-17T10:32:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526547696455_-212113830","id":"20180517-090136_200735789","dateCreated":"2018-05-17T09:01:36+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18075"},{"title":"Hyperparameter selection","text":"val evaluations = \n    for (rank <- Seq(5,30);\n         regParam <- Seq(4.0,0.0001);\n         alpha <- Seq(1.0,40.0))\n    yield {\n        val model = new ALS().\n        setSeed(Random.nextLong()).\n        setImplicitPrefs(true).\n        setRank(rank).setRegParam(regParam).\n        setAlpha(alpha).setMaxIter(20).\n        setUserCol(\"user\").setItemCol(\"artist\").\n        setRatingCol(\"count\").setPredictionCol(\"prediction\").\n        fit(trainData)\n        \n        val auc = areaUnderCurve(cvData, bAllArtistIDs, model.transform)\n        \n        model.userFactors.unpersist()\n        model.itemFactors.unpersist()\n        \n        (auc, (rank, regParam, alpha))\n    }\n    \nevaluations.sorted.reverse.foreach(println)","user":"anonymous","dateUpdated":"2018-05-17T10:33:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526548184443_992608308","id":"20180517-090944_2039182844","dateCreated":"2018-05-17T09:09:44+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18076"},{"title":"recommendations made to 100 users","text":"val someUsers = allData.select(\"user\").as[Int].distinct().take(100)\nval someRecommendations = someUsers.map(userID => (userID, makeRecommendations(model, userID, 5)))\nsomeRecommendations.foreach{ case (userID, recsDF) =>\n    val recommendedArtists = recsDF.select(\"artist\").as[Int].collect()\n    println(s\"$userID -> ${recommendedArtists.mkString(\",\")}\")","user":"anonymous","dateUpdated":"2018-05-17T10:37:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1526553209105_1103405527","id":"20180517-103329_1872856181","dateCreated":"2018-05-17T10:33:29+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:18077"}],"name":"EE_YU/Advanced_Analytics_with_Spark/Chapter3","id":"2DEGDHAPG","angularObjects":{"2CDBRM16S:shared_process":[],"2CGD9PJEV:shared_process":[],"2CEXJP4VC:shared_process":[],"2CEWFDUFC:shared_process":[],"2CCUD92DR:shared_process":[],"2CE5CMKN8:shared_process":[],"2CCT6VFHB:shared_process":[],"2CGDHC2BR:shared_process":[],"2CD5H5KA3:shared_process":[],"2CCFV6EWC:shared_process":[],"2CG8AUTUC:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}